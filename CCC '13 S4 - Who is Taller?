#include <bits/stdc++.h>

using namespace std;

#define mp make_pair
#define pb push_back
#define all(x) x.begin(), x.end()
#define fi first
#define se second
#define inf 1000000000
#define NIL -1;
#define sz(x) (ll)x.size()
#define boost() ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

typedef long long ll;
typedef unsigned long long ull;
typedef double db;
typedef vector<int> vi;
typedef vector<float> vf;
typedef pair<int, int> pii;
typedef pair<int, pii> piii;
typedef pair<int, bool> pib;
typedef vector<pii> vii;
typedef vector<pib> vib;
typedef vector<vi> vvi;
typedef vector<vii> vvii;
typedef vector<string> vs;
typedef pair<string, string> pss;
typedef pair<ll, ll> pll;
typedef vector<pss> vss;
typedef pair<db, db> pdd;
typedef vector<db> vd;
typedef vector<vib> vvib;

class node{
    public:
        int val;
        vector<int> shorter, taller;
};

int n, m, p, q;
vector<node> students(1000001);
bool v[1000001];
bool visited[1000001], added[1000001];

bool solveShorter(int a){
    for(int i=0; i<1000001; i++) visited[i]=added[i]=0;
    vi bfs = {a};
    while(!bfs.empty()){
        vi tmp;
        for(int i=0; i<int(bfs.size()); i++){
            int currentStudent = bfs[i];
            visited[currentStudent]=1;
            node currentNode = students[currentStudent];
            for(int j=0; j<int(currentNode.shorter.size()); j++){
                if(!visited[currentNode.shorter[j]] && !added[currentNode.shorter[j]]){
                    if(currentNode.shorter[j]==q) return true;
                    added[currentNode.shorter[j]]=1;
                    tmp.pb(currentNode.shorter[j]);
                }
            }
        }
        bfs=tmp;
    }
    return false;
}

bool solveTaller(int a){
    for(int i=0; i<1000001; i++) visited[i]=added[i]=0;
    vi bfs = {a};
    while(!bfs.empty()){
        vi tmp;
        for(int i=0; i<int(bfs.size()); i++){
            int currentStudent = bfs[i];
            visited[currentStudent]=1;
            node currentNode = students[currentStudent];
            for(int j=0; j<int(currentNode.taller.size()); j++){
                if(!visited[currentNode.taller[j]] && !added[currentNode.taller[j]]){
                    if(currentNode.taller[j]==q) return true;
                    added[currentNode.taller[j]]=1;
                    tmp.pb(currentNode.taller[j]);
                }
            }
        }
        bfs=tmp;
    }
    return false;
}

int main(){
    cin >> n >> m;
    while(m--){
        cin >> p >> q;
        if(!v[p]){
            node fnode;
            fnode.val = p;
            students[p] = fnode;
            v[p]=1;
        }
        if(!v[q]){
            node snode;
            snode.val = q;
            students[q] = snode;
            v[q]=1;
        }
        students[p].shorter.pb(q);
        students[q].taller.pb(p);
    }
    cin >> p >> q;
    if(solveShorter(p)) cout << "yes";
    else if(solveTaller(p)) cout << "no";
    else cout << "unknown";
    return 0;
}
// TATAKAE TATAKAE1
